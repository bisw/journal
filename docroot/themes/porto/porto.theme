<?php


/**
 * @file
 * Functions to support theming in the porto theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
global $base_url;
$theme_root = $base_url.'/'.drupal_get_path('theme','porto');



function porto_preprocess_views_view(&$variables){
    global $base_url;
    $theme_root = $base_url.'/'.drupal_get_path('theme','porto');
    $variables['theme_root'] = $theme_root;
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', "team_categories");
    $tids = $query->execute();
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple($tids);
    $variables['team_categories'] = $terms;
}

function porto_preprocess_page(&$variables) {
  global $base_url;
  $theme_root = $base_url.'/'.drupal_get_path('theme','porto');
  $variables['theme_root'] = $theme_root;
  $user = \Drupal::currentUser()->id();
  $account = \Drupal\user\Entity\User::load($user);
  //$info = $account->get('field_info')->value;
  $name = $account->getUsername();
  if($user){
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    if($user->get('user_picture')->entity){
        $picture = $user->get('user_picture')->entity->url();
    }
  }
  $language =  \Drupal::languageManager()->getCurrentLanguage()->getName();
  $variables['name_language'] = $language;
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  $variables['arg'] = $path_args[1];
  //$variables['logopath'] = $base_url . '/' . drupal_get_path('theme','porto') . '/logo.png';
  //$variables['user'] = $user;
  //$variables['name'] = $name;
  //$variables['info'] = $info;
  //$variables['picture'] = $picture;

  $variables['page_title'] = $variables['page']['#title'];
  $variables['clients_top'] = views_embed_view('client', 'block_4');
  $variables['current_url'] = $_SERVER['REQUEST_URI'];
  $theme_root = $base_url.'/'.drupal_get_path('theme','porto');
  $variables['theme_root'] = $theme_root;
  $libraries['#attached']['library'][] = 'herchel/global-styling';

  $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));

  //THEME SETTINGS
  $variables['header_option'] = theme_get_setting('header_option');
  $variables['footer_option'] = theme_get_setting('footer_option');
  $variables['footer_color_option'] = theme_get_setting('footer_color_option');
  $variables['header_sticky_option'] = theme_get_setting('header_sticky_option');
  $variables['page_header_option'] = theme_get_setting('page_header_option');
  $variables['page_header_color_option'] = theme_get_setting('page_header_color_option');
  $variables['below_slider_option'] = theme_get_setting('below_slider_option');
  $variables['navigation_option'] =  theme_get_setting('navigation_option');
  $variables['contact_option'] =  theme_get_setting('contact_option');
  $variables['contact_about_link'] =  theme_get_setting('contact_about_link');
  $variables['contact_about'] =  theme_get_setting('contact_about');
  $variables['contact_us_link'] =  theme_get_setting('contact_us_link');
  $variables['contact_us'] =  theme_get_setting('contact_us');
  $variables['breadcrumbs'] =  theme_get_setting('breadcrumbs');


}

function porto_theme_suggestions_page_alter(array &$suggestions, array $variables) {
	$request = \Drupal::routeMatch()->getRouteObject()->getDefault('view_id');
	//Override Panels Page
      $current_uri = \Drupal::request()->getRequestUri();
      if(stristr($current_uri,'index') || stristr($current_uri,'your_url') || stristr($current_uri,'index-corporate') || stristr($current_uri,'about') || stristr($current_uri,'contact-us') || stristr($current_uri,'shortcodes') || stristr($current_uri,'page-our-office')){
          $suggestions[]= 'page__panels';
      }
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    $nodeType = $node->getType();
    switch ($nodeType) {
      case 'portfolio':
        $suggestions[] =  'page__portfolio';
        break;
		
	  case 'product':
        $suggestions[] =  'page__product';
        break;
      
      default:
        # code...
        break;
    }    
  }
  
  if( $request == 'product_pages') {
	$suggestions[] =  'page__productlist'; 
  }
  
  if( $request == 'portfolio_pages') {
	$suggestions[] =  'page__portfoliolist'; 
  }

}
function porto_theme_suggestions_block_alter(&$suggestions, $variables) {
    //Override Block Type
	$content = $variables['elements']['content'];
	if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
		$suggestions[] = 'block__' . $content['#block_content']->bundle();
	}
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function porto_preprocess_node(&$variables) {
  global $base_url;
  // Assign Related Block to Porfolio Single Page
  $variables['related_portfolio'] = views_embed_view('portfolio_block', 'block_related');
  $variables['related_portfolio_carousel'] = views_embed_view('portfolio_block', 'block_related_carousel');
  $variables['base_url'] = $base_url;
  $theme_root = $base_url.'/'.drupal_get_path('theme','porto');
  $variables['theme_root'] = $theme_root;

  // Allowed view modes
  $view_mode = $variables['view_mode']; // Retrieve view mode
  $allowed_view_modes = ['full']; // Array of allowed view modes (for performance so as to not execute on unneeded nodes)
 
  // If view mode is in allowed view modes list, pass to porto_add_regions_to_node()
  if(in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded region)
    $allowed_regions = ['left_sidebar','right_sidebar'];
    porto_add_regions_to_node($allowed_regions, $variables);
  }

  $node = $variables['node'];
  if (\Drupal::currentUser()->isAnonymous()) {
    $variables['isLogin'] = FALSE;
  } else {
    $variables['isLogin'] = TRUE;
  }
  
  $nid = $variables['node']->nid->value;
  $num_comment = db_query('SELECT comment_count FROM {comment_entity_statistics} WHERE entity_id = ' . $nid)->fetchAssoc();
  $variables['comment_count'] = $num_comment['comment_count'];
}

/**
* porto_add_regions_to_node
*/
 
function porto_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme
  $theme = \Drupal::theme()->getActiveTheme()->getName();
 
  // Retrieve theme regions
  $available_regions = system_region_list($theme, 'REGIONS_ALL');
 
  // Validate allowed regions with available regions
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);
 
  // For each region
  foreach ($regions as $key => $region) {
 
    // Load region blocks
    $blocks = entity_load_multiple_by_properties('block', array('theme' => $theme, 'region' => $region));
 
    // Sort â€˜em
    uasort($blocks, 'Drupal\block\Entity\Block::sort');
 
    // Capture viewable blocks and their settings to $build
    $build = array();
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $build[$key] = entity_view($block, 'block');
      }
    }
 
    // Add build to region
    $variables[$region] = $build;
  }
}

function porto_preprocess_html(&$variables) {
    global $base_url;
    $theme_root = $base_url.'/'.drupal_get_path('theme','porto');
    $variables['theme_root'] = $theme_root;
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    $variables['arg'] = $path_args[1];
    $variables['layout_option'] = theme_get_setting('layout_option');
    $variables['header_option'] = theme_get_setting('header_option');
    $variables['h_semi_transparent_option'] = theme_get_setting('h_semi_transparent_option');
    $variables['skin_option'] = theme_get_setting('skin_option');
    $variables['loader'] = theme_get_setting('loader');
    $variables['your_css'] = theme_get_setting('your_css');
    $current_path = \Drupal::service('path.current')->getPath();
    $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
    $variables['custom_color'] =  theme_get_setting('custom_color');
}

function porto_theme_suggestions_node_alter(array &$suggestions, array $variables) {
   $product_type = $variables['elements']['#node']->getType();
   if ($variables['elements']['#view_mode'] == 'teaser') {
   $suggestions[] = 'node__' . $product_type . '__teaser';
   }

}